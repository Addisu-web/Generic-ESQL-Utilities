  CREATE PROCEDURE quickSort( IN rIn REFERENCE, INOUT rOut REFERENCE, IN sibling CHAR, IN element CHAR, IN typeCast CHAR, IN ascending BOOLEAN)
  -- rIn: A Reference to the structure, which currently embeds the unordered siblings
  -- rOut: A Reference to the structure, which will then embed the ordered siblings
  -- siblings: The name of the siblings (to be sorted)
  -- element: The Field which will be compared.
  -- typeCast: Type-Cast to proper Type: '' (No Cast), 'INT' (Integer), else 'yyyy-MM-dd HH:mm:ss' (TIMESTAMP)
  -- ascending: Sort in ascending order if TRUE, else descending order
  BEGIN
    DECLARE finished BOOLEAN FALSE;DECLARE backOut BOOLEAN FALSE;
    DECLARE rRoot REFERENCE TO rIn;DECLARE recDepth INT 0;
    WHILE NOT finished DO       
     IF FIELDNAME(rIn)='equal' THEN
        MOVE rIn FIRSTCHILD NAME sibling;
        WHILE LASTMOVE( rIn ) DO
          CALL copyElement( rIn, rOut, sibling );
          MOVE rIn NEXTSIBLING REPEAT NAME;
        END WHILE;
        MOVE rIn PARENT;DECLARE rTmp REFERENCE TO rIn;MOVE rIn PARENT;--SET rTmp = NULL;
        MOVE rIn FIRSTCHILD NAME 'lower';
      ELSE
        DECLARE rPivot REFERENCE TO rIn;
        MOVE rPivot FIRSTCHILD NAME sibling;
        IF NOT LASTMOVE(rPivot) THEN
          SET backOut=TRUE;
        ELSE
          MOVE rPivot NEXTSIBLING REPEAT NAME;
          IF NOT LASTMOVE(rPivot) THEN
            CALL copyElement( rPivot, rOut, sibling );
            SET backOut=TRUE;
          ELSE
            IF recDepth > 20 THEN -- Recursion-Tree probably/likely degenerated
              DECLARE siblingCount INT CARDINALITY( rIn.{sibling}[] ); -- Note that CARDINALITY can be bad for performance
              MOVE rPivot TO rIn.{sibling}[ (siblingCount+1)/2 ]; -- Select pivot-element from the middle
            END IF;
            DECLARE rUpper REFERENCE TO rIn;CREATE LASTCHILD OF rUpper NAME 'upper';MOVE rUpper LASTCHILD;
            DECLARE rEqual REFERENCE TO rIn;CREATE LASTCHILD OF rEqual NAME 'equal';MOVE rEqual LASTCHILD;
            DECLARE rLower REFERENCE TO rIn;CREATE LASTCHILD OF rLower NAME 'lower';MOVE rLower LASTCHILD;
            DECLARE isSmaller BOOLEAN; DECLARE isBigger BOOLEAN; MOVE rIn FIRSTCHILD NAME sibling;
            WHILE LASTMOVE( rIn ) DO
              IF typeCast = '' THEN
                SET isSmaller = rIn.{element} < rPivot.{element};
                SET isBigger = rIn.{element} > rPivot.{element};
              ELSEIF typeCast = 'INT' THEN
                SET isSmaller = CAST( rIn.{element} AS INT ) < CAST ( rPivot.{element} AS INT );
                SET isBigger = CAST( rIn.{element} AS INT ) > CAST ( rPivot.{element} AS INT );
              ELSE
                SET isSmaller = CAST( rIn.{element} AS TIMESTAMP FORMAT typeCast ) < CAST ( rPivot.{element} AS TIMESTAMP FORMAT typeCast );
                SET isBigger = CAST( rIn.{element} AS TIMESTAMP FORMAT typeCast ) > CAST ( rPivot.{element} AS TIMESTAMP FORMAT typeCast );
              END IF;
              IF ascending AND isSmaller OR NOT ascending AND isBigger THEN               
                CALL copyElement( rIn, rUpper, sibling );
              ELSEIF ascending AND isBigger OR NOT ascending AND isSmaller THEN
                CALL copyElement( rIn, rLower, sibling );
              ELSE -- is Equal
                CALL copyElement( rIn, rEqual, sibling );
              END IF;
              MOVE rIn NEXTSIBLING REPEAT NAME;
            END WHILE;
            MOVE rIn TO rUpper; SET recDepth = recDepth + 1;
          END IF;
        END IF;
      END IF;
      IF backOut THEN  -- Backs Out from recursion
        DECLARE doLoop BOOLEAN TRUE; SET backOut = FALSE;
        WHILE doLoop DO
          DECLARE rTmp REFERENCE TO rIn;MOVE rIn PARENT;--SET rTmp = NULL;
          IF FIELDNAME(rTmp)='upper' THEN
            MOVE rIn FIRSTCHILD NAME 'equal';SET doLoop = FALSE;
          ELSEIF rIn=rRoot THEN
             SET finished = TRUE;SET doLoop = FALSE;
          ELSEIF FIELDNAME(rTmp)='lower' THEN
            SET recDepth = recDepth - 1;
          END IF;
        END WHILE;
      END IF;
    END WHILE;
  END;
   
  CREATE PROCEDURE copyElement( IN rIn REFERENCE, INOUT rOut REFERENCE, IN sibling CHAR)
  BEGIN
    CREATE LASTCHILD OF rOut NAME sibling;MOVE rOut LASTCHILD;
    SET rOut = rIn;MOVE rOut PARENT;
  END;
