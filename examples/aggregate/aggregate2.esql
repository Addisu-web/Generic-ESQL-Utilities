BROKER SCHEMA examples.aggregate


CREATE COMPUTE MODULE aggregate2_aggregate2
    -- This is the code to the second example for the aggregate-method

    CREATE FUNCTION Main() RETURNS BOOLEAN
    BEGIN

      CALL CopyMessageHeaders();
      SET OutputRoot.XMLNSC.message.date = InputRoot.XMLNSC.message.header.date || ' ' || InputRoot.XMLNSC.message.header.time;

      DECLARE rOutOrder REFERENCE TO OutputRoot.XMLNSC;
      DECLARE rInOrder  REFERENCE TO InputRoot.XMLNSC.message;
      MOVE rInOrder FIRSTCHILD NAME 'order';         
      WHILE LASTMOVE( rInOrder ) DO
         
         CALL moveRef( rOutOrder, 'message.order' );
         SET rOutOrder.orderNumber = rInOrder.orderNumber;   
         
         DECLARE rOutPos REFERENCE TO rOutOrder;
         DECLARE rInPos REFERENCE TO rInOrder;
         MOVE rInPos FIRSTCHILD NAME 'position';         
         WHILE LASTMOVE( rInPos ) DO
            
            CALL aggregate( rOutPos, 'position' , 'materialNumber', rInPos.materialNumber );
         
            SET rOutPos.materialNumber = rInPos.materialNumber;
            SET rOutPos.quantity = CAST( rInPos.quantity AS INT ) + COALESCE( CAST( rOutPos.quantity AS INT ), 0);

            DECLARE rOutSubPos REFERENCE TO rOutPos;
            DECLARE rInSubPos REFERENCE TO rInPos;
            MOVE rInSubPos FIRSTCHILD NAME 'subPos';
            WHILE LASTMOVE( rInSubPos ) DO
               
               CALL aggregate( rOutSubPos, 'subPos' , 'batch', rInSubPos.batch );
            
               SET rOutSubPos.batch = rInSubPos.batch;
               SET rOutSubPos.quantity = CAST( rInSubPos.quantity AS INT ) + COALESCE( CAST( rOutSubPos.quantity AS INT ), 0);
   
               MOVE rInSubPos NEXTSIBLING REPEAT NAME;
            END WHILE;

            MOVE rInPos NEXTSIBLING REPEAT NAME;
         END WHILE;

         MOVE rInOrder NEXTSIBLING REPEAT NAME;
      END WHILE;

      RETURN TRUE;

    END;

    CREATE PROCEDURE CopyMessageHeaders() BEGIN
      DECLARE I INTEGER 1;
      DECLARE J INTEGER;
      SET J = CARDINALITY(InputRoot.*[]);
      WHILE I < J DO
        SET OutputRoot.*[I] = InputRoot.*[I];
        SET I = I + 1;
      END WHILE;
    END;

    CREATE PROCEDURE CopyEntireMessage() BEGIN
      SET OutputRoot = InputRoot;
    END;

END MODULE;
